name: Build e Análise Java

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read
  security-events: write  # necessário pro CodeQL subir resultado SARIF

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache do Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('app/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Build com Maven
        working-directory: app
        run: ./mvnw clean install

  codeql:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Inicializar CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build do código para análise
        working-directory: app
        run: ./mvnw compile -DskipTests

      - name: Executar análise CodeQL
        uses: github/codeql-action/analyze@v3

  docker-scan:
    name: Scan de Imagem Docker com Trivy
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build da imagem Docker
        run: docker build -f ./dockerfile -t spring-app:latest .

      - name: Scan da imagem com Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'spring-app:latest'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '0' # <- altere para 1 se quiser travar o pipeline

  secrets-scan:
    name: Scanner de Segredos com TruffleHog
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Instalar TruffleHog (v3)
        run: |
          curl -sL https://github.com/trufflesecurity/trufflehog/releases/download/v3.63.4/trufflehog_3.63.4_linux_amd64.tar.gz | tar xz
          chmod +x trufflehog
          sudo mv trufflehog /usr/local/bin/

      - name: Rodar TruffleHog no diretório do app
        run: trufflehog filesystem --directory=app --fail

  dast-scan:
    name: DAST Scan com ZAP
    runs-on: ubuntu-latest
    needs: docker-scan
  
    steps:
      - name: Checkout
        uses: actions/checkout@v4  # Atualizado para v4
  
      - name: Build da imagem Docker
        run: docker build -f ./dockerfile -t spring-app:latest .
  
      # Usar porta diferente da do ZAP
      - name: Rodar app na porta 8080
        run: docker run -d -p 8080:8080 --name spring-app spring-app:latest
  
      - name: Baixar e configurar OWASP ZAP
        run: |
          mkdir zap
          cd zap
          wget https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_Linux.tar.gz
          tar -xzf ZAP_2.14.0_Linux.tar.gz
          echo "ZAP_PATH=$PWD/ZAP_2.14.0" >> $GITHUB_ENV
  
      # Espera inteligente com timeout maior
      - name: Aguardar app responder
        timeout-minutes: 3
        run: |
          for i in {1..30}; do
            if curl -sSf http://localhost:8080/actuator/health >/dev/null; then
              echo "App respondendo!"
              exit 0
            fi
            echo "Aguardando app... ($i/30)"
            sleep 5
          done
          echo "App não iniciou a tempo"
          exit 1
  
      - name: Rodar ZAP scan
        run: |
          ${{ env.ZAP_PATH }}/zap.sh -cmd -quickurl http://localhost:8080 \
            -quickout /tmp/zap-report.html \
            -quickprogress
  
      # Verifica se encontrou vulnerabilidades
      - name: Verificar resultados ZAP
        id: zap-results
        run: |
          if grep -q "High Risk" /tmp/zap-report.html; then
            echo "VULNERABILITIES_FOUND=true" >> $GITHUB_OUTPUT
            echo "::error::Vulnerabilidades de alto risco encontradas!"
            exit 1
          else
            echo "VULNERABILITIES_FOUND=false" >> $GITHUB_OUTPUT
          fi
  
      - name: Upload do relatório ZAP
        if: always()  # Sempre envia o relatório mesmo com falhas
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-report
          path: /tmp/zap-report.html
  
      - name: Parar container
        if: always()  # Garante limpeza mesmo com falhas
        run: |
          docker stop spring-app || true
          docker rm spring-app || true
  
      # Falha o job se vulnerabilidades foram encontradas
      - name: Falhar se vulnerabilidades encontradas
        if: steps.zap-results.outputs.VULNERABILITIES_FOUND == 'true'
        run: exit 1


