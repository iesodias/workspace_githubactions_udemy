name: Build e Análise Java

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read
  security-events: write  # necessário pro CodeQL subir resultado SARIF

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache do Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('app/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Build com Maven
        working-directory: app
        run: ./mvnw clean install

  codeql:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Inicializar CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build do código para análise
        working-directory: app
        run: ./mvnw compile -DskipTests

      - name: Executar análise CodeQL
        uses: github/codeql-action/analyze@v3

  docker-scan:
    name: Scan de Imagem Docker com Trivy
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build da imagem Docker
        run: docker build -f ./dockerfile -t spring-app:latest .

      - name: Scan da imagem com Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'spring-app:latest'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '0' # <- altere para 1 se quiser travar o pipeline

  secrets-scan:
    name: Scanner de Segredos com TruffleHog
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Instalar TruffleHog (v3)
        run: |
          curl -sL https://github.com/trufflesecurity/trufflehog/releases/download/v3.63.4/trufflehog_3.63.4_linux_amd64.tar.gz | tar xz
          chmod +x trufflehog
          sudo mv trufflehog /usr/local/bin/

      - name: Rodar TruffleHog no diretório do app
        run: trufflehog filesystem --directory=app --fail

  dast-scan:
    name: Scan DAST com OWASP ZAP
    runs-on: ubuntu-latest
    needs: docker-scan

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Build da imagem Docker (ZAP context)
        run: docker build -f ./dockerfile -t spring-app:latest .

      - name: Rodar app em background
        run: docker run -d -p 8080:8080 --name spring-app spring-app:latest

      - name: Esperar app ficar disponível
        run: |
          for i in {1..30}; do
            nc -z localhost 8080 && echo "App online!" && break
            echo "Aguardando aplicação subir..."
            sleep 2
          done

      - name: Executar OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8080'
          fail_action: true
          cmd_options: "-config api.disablekey=true"
  

      - name: Parar container
        run: docker stop spring-app && docker rm spring-app
